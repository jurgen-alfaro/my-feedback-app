No need to import React in the components


PropTypes = type checking
- Specify what type a variable is to make the app more robust.

There are libraries to style components
- Material UI
- Styled components

State = data
There are two types of State
1. Component level state
---- This is specific to the component, no other component needs to access this.
2. App level state
---- The state is shared among other components in the app

The state in react is something inmutable, so it cannot be changed directly. 
That is why you need to use hooks, to reset the value(s) of the state. 

Hooks: 

useState() => You need this to update the state of a functional component
  const [rating, setRating] = useState(7);

useParams() => This is to get the params from an URL
  const params = useParams()
  // To use
  {params.name}

Whenever you use the map() function you need to return a value. 
To return a value, make sure you use parenthesis if there's only one line! 
<div className='feedback-list'>
  {feedback.map((item) => (
    <FeedbackItem key={item.id} item={item} />
  ))}
</div>

The './src/shared/' folder is used to share components amongs the app. All the components that should be used in different places should bee in here.

React Router DOM ==> Remember this was updated to v6!!!

BrowserRouter
- This uses the HTML5 history API to keep the UI in sync with URL

HashBrowser
- This uses the hash portion of the URL to keep it in sync

Example
If you use the hash and you want to go to about, you would do http://localhost:3000/#about
But we actually want to go to http://localhost:3000/about This is why BrowserRouter is used instead of HashBrowser

For v6 to work, you need to use 'element' instead 'component', and need to return JSX (<ComponentName />)

Use <Link> for routing. When using a regular <a> tag, the routing refreshes the page. We don't want that, we want the routing to occur directly on the client side without having to refresh

Whenever you need to show other routes within a specific component, use this: 
<Route path="/post/*" element={<Post />}/>  

Context
Is a way to provide data through the component tree. This is the way to go! 

git init
git add .
git commit -m "Message"
git add remote origin "http://url.com" 
git push -u origin main